generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()"))
  name          String?
  lastName      String?
  displayName   String?
  email         String?        @unique
  phone         String?        @unique
  createdAt     DateTime?      @default(now())
  updatedAt     DateTime?      @updatedAt
  conversations Conversation[]
}

model Conversation {
  id                   String                @id @default(dbgenerated("gen_random_uuid()"))
  userId               String
  guid                 String?
  threadId             String?
  assistantId          String?
  vectorStoreId        String?
  isActive             Boolean?
  createdAt            DateTime?             @default(now())
  updatedAt            DateTime?             @updatedAt
  user                 User                  @relation(fields: [userId], references: [id])
  conversationMessages ConversationMessage[]
}

model Message {
  id                   String                @id @default(dbgenerated("gen_random_uuid()"))
  type                 String?
  value                String?
  conversationMessages ConversationMessage[]
}

model ConversationMessage {
  id             String       @id @default(dbgenerated("gen_random_uuid()"))
  conversationId String
  messageId      String
  isInput        Boolean?
  createdAt      DateTime?    @default(now())
  updatedAt      DateTime?    @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  message        Message      @relation(fields: [messageId], references: [id])
}

enum Role {
  LAWYER
  STUDENT
  OTHER
}

enum InviteStatus {
  PENDING
  ACCEPTED
}

enum LeadStatus {
  PENDING
  ACCEPTED
  WAITLIST
}

model Lead {
  id              String     @id @default(dbgenerated("gen_random_uuid()"))
  name            String
  email           String     @unique
  phone           String     @unique
  inviteCode      String     @unique
  role            Role
  status          LeadStatus
  waitListNumber  Int
  descriptionRole String
  invitesUsed     Int        @default(0)
  acceptInvite    Boolean    @default(false)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  invites   LeadInvite[] @relation("LeadInviteDestiny")
  invitedBy LeadInvite[] @relation("LeadInviteOrigin")
}

model LeadInvite {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  originLeadId  String
  destinyLeadId String
  inviteCode    String
  inviteStatus  InviteStatus
  updatedAt     DateTime?    @updatedAt
  createdAt     DateTime     @default(now())

  originLead  Lead @relation("LeadInviteOrigin", fields: [originLeadId], references: [id])
  destinyLead Lead @relation("LeadInviteDestiny", fields: [destinyLeadId], references: [id])

  @@unique([originLeadId, destinyLeadId])
}
